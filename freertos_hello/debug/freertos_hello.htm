<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [debug\freertos_hello.out]</title></head>
<body><HR>
<H1>Static Call Graph for image debug\freertos_hello.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Tue Feb 11 10:41:16 2020
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[5c]">ADC0_SEQA_DriverIRQHandler</a>
 <LI><a href="#[5d]">ADC0_SEQB_DriverIRQHandler</a>
 <LI><a href="#[5e]">ADC0_THCMP_DriverIRQHandler</a>
 <LI><a href="#[71]">CAN0_IRQ0_DriverIRQHandler</a>
 <LI><a href="#[72]">CAN0_IRQ1_DriverIRQHandler</a>
 <LI><a href="#[73]">CAN1_IRQ0_DriverIRQHandler</a>
 <LI><a href="#[74]">CAN1_IRQ1_DriverIRQHandler</a>
 <LI><a href="#[50]">CTIMER0_DriverIRQHandler</a>
 <LI><a href="#[51]">CTIMER1_DriverIRQHandler</a>
 <LI><a href="#[6a]">CTIMER2_DriverIRQHandler</a>
 <LI><a href="#[53]">CTIMER3_DriverIRQHandler</a>
 <LI><a href="#[6b]">CTIMER4_DriverIRQHandler</a>
 <LI><a href="#[47]">DMA0_DriverIRQHandler</a>
 <LI><a href="#[5f]">DMIC0_DriverIRQHandler</a>
 <LI><a href="#[89]">DefaultISR</a>
 <LI><a href="#[7a]">EEPROM_DriverIRQHandler</a>
 <LI><a href="#[77]">ETHERNET_DriverIRQHandler</a>
 <LI><a href="#[79]">ETHERNET_MACLP_DriverIRQHandler</a>
 <LI><a href="#[78]">ETHERNET_PMT_DriverIRQHandler</a>
 <LI><a href="#[60]">HWVAD0_DriverIRQHandler</a>
 <LI><a href="#[7b]">LCD_DriverIRQHandler</a>
 <LI><a href="#[4f]">MRT0_DriverIRQHandler</a>
 <LI><a href="#[6c]">RIT_DriverIRQHandler</a>
 <LI><a href="#[63]">RTC_DriverIRQHandler</a>
 <LI><a href="#[64]">Reserved46_DriverIRQHandler</a>
 <LI><a href="#[65]">Reserved47_DriverIRQHandler</a>
 <LI><a href="#[52]">SCT0_DriverIRQHandler</a>
 <LI><a href="#[70]">SDIO_DriverIRQHandler</a>
 <LI><a href="#[7c]">SHA_DriverIRQHandler</a>
 <LI><a href="#[7d]">SMARTCARD0_DriverIRQHandler</a>
 <LI><a href="#[7e]">SMARTCARD1_DriverIRQHandler</a>
 <LI><a href="#[6d]">SPIFI0_DriverIRQHandler</a>
 <LI><a href="#[62]">USB0_DriverIRQHandler</a>
 <LI><a href="#[61]">USB0_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[75]">USB1_DriverIRQHandler</a>
 <LI><a href="#[76]">USB1_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[4e]">UTICK0_DriverIRQHandler</a>
 <LI><a href="#[46]">WDT_BOD_DriverIRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[7]">DebugMon_Handler</a>
 <LI><a href="#[a]">WDT_BOD_IRQHandler</a>
 <LI><a href="#[b]">DMA0_IRQHandler</a>
 <LI><a href="#[c]">GINT0_IRQHandler</a>
 <LI><a href="#[d]">GINT1_IRQHandler</a>
 <LI><a href="#[e]">PIN_INT0_IRQHandler</a>
 <LI><a href="#[f]">PIN_INT1_IRQHandler</a>
 <LI><a href="#[10]">PIN_INT2_IRQHandler</a>
 <LI><a href="#[11]">PIN_INT3_IRQHandler</a>
 <LI><a href="#[12]">UTICK0_IRQHandler</a>
 <LI><a href="#[13]">MRT0_IRQHandler</a>
 <LI><a href="#[14]">CTIMER0_IRQHandler</a>
 <LI><a href="#[15]">CTIMER1_IRQHandler</a>
 <LI><a href="#[16]">SCT0_IRQHandler</a>
 <LI><a href="#[17]">CTIMER3_IRQHandler</a>
 <LI><a href="#[18]">FLEXCOMM0_IRQHandler</a>
 <LI><a href="#[19]">FLEXCOMM1_IRQHandler</a>
 <LI><a href="#[1a]">FLEXCOMM2_IRQHandler</a>
 <LI><a href="#[1b]">FLEXCOMM3_IRQHandler</a>
 <LI><a href="#[1c]">FLEXCOMM4_IRQHandler</a>
 <LI><a href="#[1d]">FLEXCOMM5_IRQHandler</a>
 <LI><a href="#[1e]">FLEXCOMM6_IRQHandler</a>
 <LI><a href="#[1f]">FLEXCOMM7_IRQHandler</a>
 <LI><a href="#[20]">ADC0_SEQA_IRQHandler</a>
 <LI><a href="#[21]">ADC0_SEQB_IRQHandler</a>
 <LI><a href="#[22]">ADC0_THCMP_IRQHandler</a>
 <LI><a href="#[23]">DMIC0_IRQHandler</a>
 <LI><a href="#[24]">HWVAD0_IRQHandler</a>
 <LI><a href="#[25]">USB0_NEEDCLK_IRQHandler</a>
 <LI><a href="#[26]">USB0_IRQHandler</a>
 <LI><a href="#[27]">RTC_IRQHandler</a>
 <LI><a href="#[28]">Reserved46_IRQHandler</a>
 <LI><a href="#[29]">Reserved47_IRQHandler</a>
 <LI><a href="#[2a]">PIN_INT4_IRQHandler</a>
 <LI><a href="#[2b]">PIN_INT5_IRQHandler</a>
 <LI><a href="#[2c]">PIN_INT6_IRQHandler</a>
 <LI><a href="#[2d]">PIN_INT7_IRQHandler</a>
 <LI><a href="#[2e]">CTIMER2_IRQHandler</a>
 <LI><a href="#[2f]">CTIMER4_IRQHandler</a>
 <LI><a href="#[30]">RIT_IRQHandler</a>
 <LI><a href="#[31]">SPIFI0_IRQHandler</a>
 <LI><a href="#[32]">FLEXCOMM8_IRQHandler</a>
 <LI><a href="#[33]">FLEXCOMM9_IRQHandler</a>
 <LI><a href="#[34]">SDIO_IRQHandler</a>
 <LI><a href="#[35]">CAN0_IRQ0_IRQHandler</a>
 <LI><a href="#[36]">CAN0_IRQ1_IRQHandler</a>
 <LI><a href="#[37]">CAN1_IRQ0_IRQHandler</a>
 <LI><a href="#[38]">CAN1_IRQ1_IRQHandler</a>
 <LI><a href="#[39]">USB1_IRQHandler</a>
 <LI><a href="#[3a]">USB1_NEEDCLK_IRQHandler</a>
 <LI><a href="#[3b]">ETHERNET_IRQHandler</a>
 <LI><a href="#[3c]">ETHERNET_PMT_IRQHandler</a>
 <LI><a href="#[3d]">ETHERNET_MACLP_IRQHandler</a>
 <LI><a href="#[3e]">EEPROM_IRQHandler</a>
 <LI><a href="#[3f]">LCD_IRQHandler</a>
 <LI><a href="#[40]">SHA_IRQHandler</a>
 <LI><a href="#[41]">SMARTCARD0_IRQHandler</a>
 <LI><a href="#[42]">SMARTCARD1_IRQHandler</a>
 <LI><a href="#[aa]">POWER_SetPLL</a>
 <LI><a href="#[94]">POWER_SetVoltageForFreq</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b4]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">__aeabi_assert</a><BR>
 <LI><a href="#[fa]">SerialManager_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">__aeabi_assert</a><BR>
 <LI><a href="#[f9]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">__aeabi_assert</a><BR>
 <LI><a href="#[e2]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">__aeabi_assert</a><BR>
 <LI><a href="#[e3]">USART_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9d]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5c]">ADC0_SEQA_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[20]">ADC0_SEQA_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5d]">ADC0_SEQB_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[21]">ADC0_SEQB_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5e]">ADC0_THCMP_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[22]">ADC0_THCMP_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[71]">CAN0_IRQ0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[35]">CAN0_IRQ0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[72]">CAN0_IRQ1_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[36]">CAN0_IRQ1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[73]">CAN1_IRQ0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[37]">CAN1_IRQ0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[74]">CAN1_IRQ1_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[38]">CAN1_IRQ1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[50]">CTIMER0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[14]">CTIMER0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[51]">CTIMER1_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[15]">CTIMER1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6a]">CTIMER2_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[2e]">CTIMER2_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[53]">CTIMER3_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[17]">CTIMER3_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6b]">CTIMER4_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[2f]">CTIMER4_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[47]">DMA0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[b]">DMA0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5f]">DMIC0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[23]">DMIC0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[7f]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(.text.DbgConsole_PrintCallback) referenced 2 times from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[7a]">EEPROM_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[3e]">EEPROM_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[77]">ETHERNET_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[3b]">ETHERNET_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[79]">ETHERNET_MACLP_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[3d]">ETHERNET_MACLP_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[78]">ETHERNET_PMT_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[3c]">ETHERNET_PMT_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[54]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[18]">FLEXCOMM0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[55]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[19]">FLEXCOMM1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[56]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1a]">FLEXCOMM2_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[57]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1b]">FLEXCOMM3_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[58]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1c]">FLEXCOMM4_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[59]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1d]">FLEXCOMM5_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5a]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1e]">FLEXCOMM6_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5b]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1f]">FLEXCOMM7_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6e]">FLEXCOMM8_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[32]">FLEXCOMM8_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6f]">FLEXCOMM9_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM9_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[33]">FLEXCOMM9_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[48]">GINT0_DriverIRQHandler</a> from fsl_gint.o(.text.GINT0_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[c]">GINT0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[49]">GINT1_DriverIRQHandler</a> from fsl_gint.o(.text.GINT1_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[d]">GINT1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[83]">GPCHAR_task</a> from freertos_hello.o(.text.GPCHAR_task) referenced 2 times from freertos_hello.o(.text.Task_Create)
 <LI><a href="#[60]">HWVAD0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[24]">HWVAD0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[7b]">LCD_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[3f]">LCD_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4f]">MRT0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[13]">MRT0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[4a]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT0_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[e]">PIN_INT0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4b]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT1_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[f]">PIN_INT1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4c]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT2_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[10]">PIN_INT2_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4d]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT3_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[11]">PIN_INT3_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[66]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT4_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[2a]">PIN_INT4_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[67]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT5_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[2b]">PIN_INT5_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[68]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT6_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[2c]">PIN_INT6_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[69]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT7_DriverIRQHandler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[2d]">PIN_INT7_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[81]">PinInt0_Callback</a> from freertos_hello.o(.text.PinInt0_Callback) referenced 2 times from freertos_hello.o(.text.GPIO_Interrupt_Init)
 <LI><a href="#[6c]">RIT_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[30]">RIT_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[63]">RTC_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[27]">RTC_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[64]">Reserved46_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[28]">Reserved46_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[65]">Reserved47_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[29]">Reserved47_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[52]">SCT0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[16]">SCT0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[70]">SDIO_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[34]">SDIO_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[7c]">SHA_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[40]">SHA_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[7d]">SMARTCARD0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[41]">SMARTCARD0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[7e]">SMARTCARD1_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[42]">SMARTCARD1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6d]">SPIFI0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[31]">SPIFI0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[44]">SystemInit</a> from system_lpc54608.o(.text.SystemInit) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[84]">USART_TransferHandleIRQ</a> from fsl_usart.o(.text.USART_TransferHandleIRQ) referenced 2 times from fsl_usart.o(.text.USART_TransferCreateHandle)
 <LI><a href="#[85]">USART_UserCallback</a> from freertos_hello.o(.text.USART_UserCallback) referenced 2 times from freertos_hello.o(.text.main)
 <LI><a href="#[62]">USB0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[26]">USB0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[61]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[25]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[75]">USB1_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[39]">USB1_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[76]">USB1_NEEDCLK_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[3a]">USB1_NEEDCLK_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[4e]">UTICK0_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[12]">UTICK0_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[46]">WDT_BOD_DriverIRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[a]">WDT_BOD_IRQHandler</a> from startup_lpc54608.o(.text) referenced from startup_lpc54608.o(.isr_vector)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc54608.o(.text)
 <LI><a href="#[80]">gint0_callback</a> from freertos_hello.o(.text.gint0_callback) referenced 2 times from freertos_hello.o(.text.GPIO_Interrupt_Init)
 <LI><a href="#[43]">main</a> from freertos_hello.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[86]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[82]">tick_task</a> from freertos_hello.o(.text.tick_task) referenced 2 times from freertos_hello.o(.text.Task_Create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[87]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[122]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[123]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[124]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[125]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[126]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>ADC0_SEQA_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>ADC0_SEQB_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>ADC0_THCMP_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>CAN0_IRQ0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>CAN0_IRQ1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>CAN1_IRQ0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>CAN1_IRQ1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>DMIC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_SEQA_DriverIRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>EEPROM_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>ETHERNET_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>ETHERNET_MACLP_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>ETHERNET_PMT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>HWVAD0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>LCD_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>RIT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>Reserved47_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>SDIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>SHA_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>SMARTCARD0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>SMARTCARD1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>SPIFI0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>USB1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>USB1_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>ADC0_SEQA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>ADC0_SEQB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>DMIC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>HWVAD0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>Reserved47_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>RIT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>SPIFI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>FLEXCOMM8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>FLEXCOMM9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>CAN0_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>CAN0_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>USB1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>USB1_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>ETHERNET_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>ETHERNET_PMT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>ETHERNET_MACLP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>LCD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>SHA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>SMARTCARD0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>SMARTCARD1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc54608.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFrgClkFreq
</UL>

<P><STRONG><a name="[127]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
</UL>

<P><STRONG><a name="[fc]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[12f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>BOARD_BootClockPLL180M</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, clock_config.o(.text.BOARD_BootClockPLL180M))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockPLL180M &rArr; CLOCK_SetPLLFreq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, board.o(.text.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>BOARD_InitPins</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BOARD_InitPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>CLOCK_AttachClk</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetCoreSysClkFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtOscFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
</UL>

<P><STRONG><a name="[a6]"></a>CLOCK_GetFRGInputClock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFRGInputClock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFrgClkFreq
</UL>

<P><STRONG><a name="[9b]"></a>CLOCK_GetFlexCommClkFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFlexCommClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetFlexCommClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllOutFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_GetFrgClkFreq</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFrgClkFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a2]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
</UL>

<P><STRONG><a name="[a4]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
</UL>

<P><STRONG><a name="[a5]"></a>CLOCK_GetPllOutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPllOutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
</UL>

<P><STRONG><a name="[a3]"></a>CLOCK_GetWdtOscFreq</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetWdtOscFreq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[98]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
</UL>

<P><STRONG><a name="[95]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCycles
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
</UL>

<P><STRONG><a name="[96]"></a>CLOCK_SetPLLFreq</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_SetPLLFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CLOCK_SetPLLFreq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsSystemPLLLocked
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Enable_SysOsc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
</UL>

<P><STRONG><a name="[97]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SetupFROClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
</UL>

<P><STRONG><a name="[af]"></a>DbgConsole_Getchar</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fsl_debug_console.o(.text.DbgConsole_Getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DbgConsole_Getchar &rArr; DbgConsole_ReadCharacter &rArr; DbgConsole_ReadOneCharacter &rArr; SerialManager_ReadBlocking &rArr; SerialManager_Read &rArr; SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ReadCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPCHAR_task
</UL>

<P><STRONG><a name="[9c]"></a>DbgConsole_Init</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, fsl_debug_console.o(.text.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[b5]"></a>DbgConsole_Printf</STRONG> (Thumb, 76 bytes, Stack size 160 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gint0_callback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInt0_Callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPCHAR_task
</UL>

<P><STRONG><a name="[b8]"></a>DbgConsole_Putchar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fsl_debug_console.o(.text.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_Putchar &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPCHAR_task
</UL>

<P><STRONG><a name="[b0]"></a>DbgConsole_ReadCharacter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fsl_debug_console.o(.text.DbgConsole_ReadCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DbgConsole_ReadCharacter &rArr; DbgConsole_ReadOneCharacter &rArr; SerialManager_ReadBlocking &rArr; SerialManager_Read &rArr; SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ReadOneCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Getchar
</UL>

<P><STRONG><a name="[b9]"></a>DbgConsole_ReadOneCharacter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_debug_console.o(.text.DbgConsole_ReadOneCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DbgConsole_ReadOneCharacter &rArr; SerialManager_ReadBlocking &rArr; SerialManager_Read &rArr; SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_ReadBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ReadCharacter
</UL>

<P><STRONG><a name="[b4]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, fsl_debug_console.o(.text.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Putchar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[54]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>FLEXCOMM8_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM8_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>FLEXCOMM9_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.FLEXCOMM9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FLEXCOMM9_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetIRQHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[c3]"></a>FLEXCOMM_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c6]"></a>FLEXCOMM_SetIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_SetIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FLEXCOMM_SetIRQHandler &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
</UL>

<P><STRONG><a name="[48]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_gint.o(.text.GINT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GINT0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_gint.o(.text.GINT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GINT1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>GINT_ConfigPins</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT_ConfigPins))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[c8]"></a>GINT_EnableCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_gint.o(.text.GINT_EnableCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GINT_EnableCallback &rArr; GINT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_GetInstance
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_ClrStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[cc]"></a>GINT_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_gint.o(.text.GINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_GetInstance
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[ce]"></a>GINT_SetCtrl</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fsl_gint.o(.text.GINT_SetCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GINT_SetCtrl &rArr; GINT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, freertos_hello.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GPIO_Init &rArr; GPIO_PortInit &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>GPIO_Interrupt_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, freertos_hello.o(.text.GPIO_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GPIO_Interrupt_Init &rArr; GINT_SetCtrl &rArr; GINT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_SetCtrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_EnableCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_ConfigPins
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_PinInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_PortInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, fsl_gpio.o(.text.GPIO_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPIO_PortInit &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_UartInit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, usart_adapter.o(.text.HAL_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UartReceiveBlocking</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usart_adapter.o(.text.HAL_UartReceiveBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBlocking
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartRead
</UL>

<P><STRONG><a name="[e2]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usart_adapter.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[d6]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_AttachSignal))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[d7]"></a>INPUTMUX_Deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_Deinit))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[d5]"></a>INPUTMUX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[da]"></a>PINT_EnableCallbackByIndex</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsl_pint.o(.text.PINT_EnableCallbackByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PINT_EnableCallbackByIndex &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[d8]"></a>PINT_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_pint.o(.text.PINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[eb]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PinInterruptClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
</UL>

<P><STRONG><a name="[d9]"></a>PINT_PinInterruptConfig</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fsl_pint.o(.text.PINT_PinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PINT_PinInterruptConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrRiseFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrFallFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
</UL>

<P><STRONG><a name="[4a]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT3_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT4_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT5_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT6_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT7_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>POWER_SetPLL</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.POWER_SetPLL))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
</UL>

<P><STRONG><a name="[94]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.POWER_SetVoltageForFreq))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>PinInt0_Callback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, freertos_hello.o(.text.PinInt0_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PinInt0_Callback &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_hello.o(.text.GPIO_Interrupt_Init)
</UL>
<P><STRONG><a name="[ef]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[9a]"></a>RESET_PeripheralReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[f0]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[ad]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fsl_common.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[b1]"></a>SerialManager_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[b3]"></a>SerialManager_OpenReadHandle</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_OpenReadHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SerialManager_OpenReadHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[b2]"></a>SerialManager_OpenWriteHandle</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, serial_manager.o(.text.SerialManager_OpenWriteHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SerialManager_OpenWriteHandle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[ba]"></a>SerialManager_ReadBlocking</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SerialManager_ReadBlocking &rArr; SerialManager_Read &rArr; SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ReadOneCharacter
</UL>

<P><STRONG><a name="[bb]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SerialManager_WriteBlocking &rArr; SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[f2]"></a>Serial_UartInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, serial_port_uart.o(.text.Serial_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
</UL>

<P><STRONG><a name="[f7]"></a>Serial_UartRead</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, serial_port_uart.o(.text.Serial_UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartReading
</UL>

<P><STRONG><a name="[f9]"></a>Serial_UartWrite</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, serial_port_uart.o(.text.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>

<P><STRONG><a name="[b7]"></a>StrFormatPrintf</STRONG> (Thumb, 554 bytes, Stack size 96 bytes, fsl_str.o(.text.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc54608.o(.text)
<LI> startup_lpc54608.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_lpc54608.o(.text.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc54608.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_lpc54608.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ff]"></a>Task_Create</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, freertos_hello.o(.text.Task_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Task_Create &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_usart.o(.text.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>USART_GetInstance</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
</UL>

<P><STRONG><a name="[de]"></a>USART_Init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, fsl_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableContinuousSCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>USART_ReadBlocking</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, fsl_usart.o(.text.USART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
</UL>

<P><STRONG><a name="[102]"></a>USART_SetBaudRate</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, fsl_usart.o(.text.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[104]"></a>USART_TransferCreateHandle</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fsl_usart.o(.text.USART_TransferCreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART_TransferCreateHandle &rArr; FLEXCOMM_SetIRQHandler &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetIRQHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetInstance
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>USART_TransferGetRxRingBufferLength</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_TransferGetRxRingBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferIsRxRingBufferFull
</UL>

<P><STRONG><a name="[84]"></a>USART_TransferHandleIRQ</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, fsl_usart.o(.text.USART_TransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART_TransferHandleIRQ &rArr; USART_TransferIsRxRingBufferFull &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferIsRxRingBufferFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_usart.o(.text.USART_TransferCreateHandle)
</UL>
<P><STRONG><a name="[107]"></a>USART_TransferReceiveNonBlocking</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, fsl_usart.o(.text.USART_TransferReceiveNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USART_TransferReceiveNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>USART_TransferSendNonBlocking</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_TransferSendNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = USART_TransferSendNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>USART_UserCallback</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, freertos_hello.o(.text.USART_UserCallback))
<BR>[Address Reference Count : 1]<UL><LI> freertos_hello.o(.text.main)
</UL>
<P><STRONG><a name="[e3]"></a>USART_WriteBlocking</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_WriteBlocking))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_assert</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBlocking
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartRead
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM9_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM8_DriverIRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_GetInstance
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferSendNonBlocking
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferHandleIRQ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetInstance
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferIsRxRingBufferFull
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ReadCharacter
</UL>

<P><STRONG><a name="[80]"></a>gint0_callback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, freertos_hello.o(.text.gint0_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gint0_callback &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_hello.o(.text.GPIO_Interrupt_Init)
</UL>
<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, freertos_hello.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = main &rArr; BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; SerialManager_Init &rArr; Serial_UartInit &rArr; HAL_UartInit &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFlexCommClkFreq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferSendNonBlocking
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Create
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Interrupt_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[118]"></a>pvPortMalloc</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[116]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[10d]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[117]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[115]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[10f]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[10e]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[111]"></a>vPortEnterCritical</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[113]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[11f]"></a>vPortFree</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[11e]"></a>vTaskDelayUntil</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task
</UL>

<P><STRONG><a name="[119]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ec]"></a>vTaskSwitchContext</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[100]"></a>xTaskCreate</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Create
</UL>

<P><STRONG><a name="[11d]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task
</UL>

<P><STRONG><a name="[fd]"></a>xTaskIncrementTick</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11c]"></a>xTaskResumeAll</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[132]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10c]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[110]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[114]"></a>prvInitialiseNewTask</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[112]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[120]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[86]"></a>prvTaskExitError</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[11a]"></a>prvHeapInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[11b]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[92]"></a>POWER_DisablePD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clock_config.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockPLL180M
</UL>

<P><STRONG><a name="[9f]"></a>CLOCK_EnableClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[a0]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pin_mux.o(.text.IOCON_PinMuxSet))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[f3]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_manager.o(.text.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[f4]"></a>EnableGlobalIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial_manager.o(.text.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenWriteHandle
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_OpenReadHandle
</UL>

<P><STRONG><a name="[f5]"></a>SerialManager_Read</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SerialManager_Read &rArr; SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartReading
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_ReadBlocking
</UL>

<P><STRONG><a name="[f6]"></a>SerialManager_StartReading</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_StartReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Read
</UL>

<P><STRONG><a name="[f8]"></a>SerialManager_StartWriting</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_StartWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SerialManager_StartWriting &rArr; Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_Write
</UL>

<P><STRONG><a name="[fa]"></a>SerialManager_Write</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = SerialManager_Write &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_StartWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[df]"></a>HAL_UartGetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart_adapter.o(.text.HAL_UartGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartReceiveBlocking
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartInit
</UL>

<P><STRONG><a name="[a9]"></a>CLOCK_Enable_SysOsc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_Enable_SysOsc))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
</UL>

<P><STRONG><a name="[ae]"></a>CLOCK_IsSystemPLLLocked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsSystemPLLLocked))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
</UL>

<P><STRONG><a name="[a8]"></a>CLOCK_SetFLASHAccessCycles</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCycles))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
</UL>

<P><STRONG><a name="[ac]"></a>POWER_DisablePD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
</UL>

<P><STRONG><a name="[ab]"></a>POWER_EnablePD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(.text.POWER_EnablePD))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLLFreq
</UL>

<P><STRONG><a name="[f1]"></a>DelayLoop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_common.o(.text.DelayLoop))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_EnableClock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[c7]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[c5]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCOMM_SetPeriph
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[db]"></a>CLOCK_EnableClock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_gpio.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortInit
</UL>

<P><STRONG><a name="[108]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(.text.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
</UL>

<P><STRONG><a name="[109]"></a>EnableGlobalIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_usart.o(.text.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
</UL>

<P><STRONG><a name="[bc]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_usart.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferCreateHandle
</UL>

<P><STRONG><a name="[103]"></a>USART_EnableContinuousSCLK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_usart.o(.text.USART_EnableContinuousSCLK))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[106]"></a>USART_TransferIsRxRingBufferFull</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fsl_usart.o(.text.USART_TransferIsRxRingBufferFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USART_TransferIsRxRingBufferFull &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferHandleIRQ
</UL>

<P><STRONG><a name="[bd]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_usart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_EnableClock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_gint.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_Init
</UL>

<P><STRONG><a name="[be]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_gint.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_EnableCallback
</UL>

<P><STRONG><a name="[ca]"></a>GINT_ClrStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT_ClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_EnableCallback
</UL>

<P><STRONG><a name="[c9]"></a>GINT_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GINT_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_SetCtrl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_EnableCallback
</UL>

<P><STRONG><a name="[cb]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_gint.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GINT_EnableCallback
</UL>

<P><STRONG><a name="[bf]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_gint.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[e4]"></a>CLOCK_DisableClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.CLOCK_DisableClock))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Deinit
</UL>

<P><STRONG><a name="[e5]"></a>CLOCK_EnableClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_Init
</UL>

<P><STRONG><a name="[e8]"></a>CLOCK_EnableClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_pint.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[c0]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_pint.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
</UL>

<P><STRONG><a name="[ea]"></a>PINT_PinInterruptClrFallFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PinInterruptClrFallFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
</UL>

<P><STRONG><a name="[e9]"></a>PINT_PinInterruptClrRiseFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PinInterruptClrRiseFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
</UL>

<P><STRONG><a name="[e7]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_pint.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
</UL>

<P><STRONG><a name="[c1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_pint.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[83]"></a>GPCHAR_task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos_hello.o(.text.GPCHAR_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GPCHAR_task &rArr; DbgConsole_Getchar &rArr; DbgConsole_ReadCharacter &rArr; DbgConsole_ReadOneCharacter &rArr; SerialManager_ReadBlocking &rArr; SerialManager_Read &rArr; SerialManager_StartReading &rArr; Serial_UartRead &rArr; HAL_UartReceiveBlocking &rArr; USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Putchar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_hello.o(.text.Task_Create)
</UL>
<P><STRONG><a name="[d2]"></a>GPIO_PinWrite</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertos_hello.o(.text.GPIO_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[ed]"></a>GPIO_PortRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos_hello.o(.text.GPIO_PortRead))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gint0_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInt0_Callback
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_PortToggle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos_hello.o(.text.GPIO_PortToggle))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gint0_callback
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinInt0_Callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task
</UL>

<P><STRONG><a name="[82]"></a>tick_task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, freertos_hello.o(.text.tick_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tick_task &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_hello.o(.text.Task_Create)
</UL>
<P><STRONG><a name="[7f]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[fb]"></a>ConvertRadixNumToString</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fsl_str.o(.text.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
